/*
Fichier:      ROVER ORANO INNOVATION 
Description:  Code Arduino, permettant de controler un petit rover
Creation :    20.07.2022
*/

// On associe la borne "ENA" du L298N à la pin D10 de l'Arduino (PWM possible sur cette broche)

#include <SoftwareSerial.h>
#include <Servo.h>

SoftwareSerial BT(10, 11);
Servo myservo; 

// Association des entrees du L298N, aux sorties de l'Arduino Uno 

#define borneENA        5       // On associe la borne "ENA" du L298N a la pin 5 de l'Arduino (broche PWM)
#define borneIN1        2       // On associe la borne "IN1" du L298N a la pin 2 de l'Arduino
#define borneIN2        3       // On associe la borne "IN2" du L298N a la pin 3 de l'Arduino
#define borneIN3        4       // On associe la borne "IN3" du L298N a la pin 4 de l'Arduino
#define borneIN4        7       // On associe la borne "IN4" du L298N a la pin 7 de l'Arduino
#define borneENB        6       // On associe la borne "ENB" du L298N a la pin 6 de l'Arduino (broche PWM)

//Constatnes du programme

    //Mouvements Moteur

      // On defini des constante pour les directions

const char MARCHE_AVANT     =  'A';            
const char MARCHE_ARRIERE   =  'B';      
const char AVANT_GAUCHE     =  'C';
const char AVANT_DROITE     =  'D';        
const char ARRIERE_GAUCHE   =  'E';
const char ARRIERE_DROITE   =  'F';
const char CENTRE_GAUCHE    =  'G';
const char CENTRE_DROITE    =  'H';

    //Mouvement Servo

const char SERVO_0 =    'I';
const char SERVO_45 =   'J';
const char SERVO_90 =   'K';
const char SERVO_135 =  'L';
const char SERVO_180 =  'M';

    //Mode Lent / Rapide
const char LENT =    'N';
const char RAPIDE =  'O';

//Variables du programmes

int pos = 90;        // Position a l'allumage du Rover (90°)
char BluetoothData;  // Date recu par le communication bluetooth 
char mode;

//*************************************************************//
                  // SETUP //
//*************************************************************//

void setup() {

  Serial.begin(9600);       // initialise la liaison serie a 9600 bauds;
  BT.begin(9600);           // declare la vitesse de communication

  Serial.println("Communication BLUETOOTTH -- TEST AVEC MODULE HC-06");
  Serial.println("Console DEBUG");

 // Configuration des pins de l'Arduino en "sortie"(pour L298N)

  pinMode(borneENA, OUTPUT);
  pinMode(borneIN1, OUTPUT);
  pinMode(borneIN2, OUTPUT);
  pinMode(borneIN3, OUTPUT);
  pinMode(borneIN4, OUTPUT);
  pinMode(borneENB, OUTPUT);

  myservo.attach(9);
  myservo.write(pos);
   
}

//*************************************************************//
              // Boucle principale : LOOP //
//*************************************************************//


void loop() {

   // Lecture du module BT et affichage des données sur le moniteur série de l'Ordinateur


 if (BT.available())
 {
    BluetoothData = BT.read();    //Recupere le caractere qui vient du module bluetooth 
    Serial.write(BluetoothData);  //Affiche le caractere sur le moniteur Serie (Utile pour debug)

  //Associe une action en fonction du caractere recu//

              //*********************//
                  // Deplacement //
              //*********************//

    if(BluetoothData=='1'){
    configurerSensDeRotationPont(MARCHE_AVANT);
    //configurerModeLentRapide(mode)
    }
   
    else if(BluetoothData=='3'){
    configurerSensDeRotationPont(MARCHE_ARRIERE);
    }

    else if(BluetoothData=='4'){
    configurerSensDeRotationPont(CENTRE_DROITE);
    }

    else if(BluetoothData=='2'){
    configurerSensDeRotationPont(CENTRE_GAUCHE);
    }

    else if(BluetoothData=='8'){
    configurerSensDeRotationPont(AVANT_DROITE);
    }

    else if(BluetoothData=='5'){
    configurerSensDeRotationPont(AVANT_GAUCHE);
    }

    else if(BluetoothData=='7'){
    configurerSensDeRotationPont(ARRIERE_DROITE);
    }
   
    else if(BluetoothData=='6'){
    configurerSensDeRotationPont(ARRIERE_GAUCHE);
    }

              //*********************//
                  // ServoMotor //
              //*********************//

    else if(BluetoothData=='A'){
    myservo.write(180);
    }

    else if(BluetoothData=='B'){
    myservo.write(135);
    }  

    else if(BluetoothData=='C'){
    myservo.write(90);
    }

    else if(BluetoothData=='D'){
    myservo.write(45);
    }

    else if(BluetoothData=='E'){
    myservo.write(0);
    }

              //*********************//
                  // Mode //
              //*********************//
    else if (BluetoothData=='L'){
      mode = LENT;
    }

    else if (BluetoothData=='R'){
      mode = RAPIDE;
    } 

    else{
    digitalWrite(borneIN1, LOW);                 
    digitalWrite(borneIN2, LOW);                  
    digitalWrite(borneIN3, LOW);                 
    digitalWrite(borneIN4, LOW);
    }
 }   
}

//*************************************************************//
                  // FONCTIONS //
//*************************************************************//

              //*********************//
                  // Direction //
              //*********************//
                                   
/*Il s'agit de configurer 8 fonctions de direction :

    -Marche avant
    -Marche arriere
    -Tourner a droite (en avancant)
    -Tourner a gauche (en avancant)
    -Tourner a droite (en reculant)
    -Tourner a gauche (en reculant)    
    -Tourner a droite par rapport au centre de gravite
    -Tourner a gauche par rapport au centre de gravite
    
*/

void configurerModeLentRapide(char modeLentRapide) {

    if(modeLentRapide == LENT) {
      changeVitesseMoteurPontA(150);
      changeVitesseMoteurPontB(150);
    }
    else if(modeLentRapide == RAPIDE){
      changeVitesseMoteurPontA(255);
      changeVitesseMoteurPontB(255);
    }
    else {
      changeVitesseMoteurPontA(0);
      changeVitesseMoteurPontB(0);

    }


}

void configurerSensDeRotationPont(char sensDeRotation) {

  if(sensDeRotation == MARCHE_AVANT) {

    digitalWrite(borneIN1, HIGH);                 
    digitalWrite(borneIN2, LOW);                  
    digitalWrite(borneIN3, HIGH);                 
    digitalWrite(borneIN4, LOW); 

    configurerModeLentRapide(mode); 
  }
  
  if(sensDeRotation == MARCHE_ARRIERE) {

    digitalWrite(borneIN1, LOW);                
    digitalWrite(borneIN2, HIGH);                 
    digitalWrite(borneIN3, LOW);             
    digitalWrite(borneIN4, HIGH);               
    
   configurerModeLentRapide(mode);
  }

   if(sensDeRotation ==   AVANT_GAUCHE ) {

    digitalWrite(borneIN1, HIGH);                 
    digitalWrite(borneIN2, LOW);                  
    digitalWrite(borneIN3, HIGH);                 
    digitalWrite(borneIN4, LOW); 
    
    changeVitesseMoteurPontA(110); 
    changeVitesseMoteurPontB(220);  
  }

    if(sensDeRotation ==   AVANT_DROITE) {

    digitalWrite(borneIN1, HIGH);                 
    digitalWrite(borneIN2, LOW);                  
    digitalWrite(borneIN3, HIGH);                 
    digitalWrite(borneIN4, LOW); 

    changeVitesseMoteurPontA(220); 
    changeVitesseMoteurPontB(110);
  }

    if(sensDeRotation ==   ARRIERE_GAUCHE) {

    digitalWrite(borneIN1, LOW);                 
    digitalWrite(borneIN2, HIGH);                  
    digitalWrite(borneIN3, LOW);                 
    digitalWrite(borneIN4, HIGH); 

    changeVitesseMoteurPontA(110); 
    changeVitesseMoteurPontB(220);  
  }

    if(sensDeRotation ==   ARRIERE_DROITE) {

    digitalWrite(borneIN1, LOW);                 
    digitalWrite(borneIN2, HIGH);                  
    digitalWrite(borneIN3, LOW);                 
    digitalWrite(borneIN4, HIGH); 

    changeVitesseMoteurPontA(220); 
    changeVitesseMoteurPontB(110);  
  }

  if(sensDeRotation == CENTRE_GAUCHE) {

    digitalWrite(borneIN1, LOW);               
    digitalWrite(borneIN2, HIGH);        
    digitalWrite(borneIN3, HIGH);                 
    digitalWrite(borneIN4, LOW);     

    configurerModeLentRapide(mode);             
  }

    if(sensDeRotation == CENTRE_DROITE) {

    digitalWrite(borneIN1, HIGH);                
    digitalWrite(borneIN2, LOW);               
    digitalWrite(borneIN3, LOW);                 
    digitalWrite(borneIN4, HIGH);  

   configurerModeLentRapide(mode);                           
  } 
}

              //*********************//
                  // Vitesse //
              //*********************//
                                                                        

void changeVitesseMoteurPontA(int nouvelleVitesseA) {
  
  analogWrite(borneENA, nouvelleVitesseA);
}
void changeVitesseMoteurPontB(int nouvelleVitesseB) {
  
  analogWrite(borneENB, nouvelleVitesseB);
}
